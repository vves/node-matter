import { ResumptionRecord } from "./session/SessionManager";
import { Session } from "./session/Session";
import { Fabric } from "./fabric/Fabric";
import { NetInterface } from "../net/NetInterface";
import { Channel } from "../net/Channel";
import { ProtocolHandler } from "./common/ProtocolHandler";
import { Broadcaster } from "./common/Broadcaster";
import { Scanner } from "./common/Scanner";
import { VendorId } from "./common/VendorId";
import { NodeId } from "./common/NodeId";
import { ByteArray } from "@project-chip/matter.js";
import { FabricIndex } from "./common/FabricIndex";
export declare class MatterDevice {
    private readonly deviceName;
    private readonly deviceType;
    private readonly vendorId;
    private readonly productId;
    private readonly discriminator;
    private readonly scanners;
    private readonly broadcasters;
    private readonly netInterfaces;
    private readonly fabricManager;
    private readonly sessionManager;
    private readonly channelManager;
    private readonly exchangeManager;
    constructor(deviceName: string, deviceType: number, vendorId: VendorId, productId: number, discriminator: number);
    addScanner(scanner: Scanner): this;
    addBroadcaster(broadcaster: Broadcaster): this;
    addNetInterface(netInterface: NetInterface): this;
    addProtocolHandler(protocol: ProtocolHandler<MatterDevice>): this;
    start(): void;
    getNextAvailableSessionId(): number;
    createSecureSession(sessionId: number, fabric: Fabric | undefined, peerNodeId: NodeId, peerSessionId: number, sharedSecret: ByteArray, salt: ByteArray, isInitiator: boolean, isResumption: boolean, idleRetransTimeoutMs?: number, activeRetransTimeoutMs?: number): Promise<import("./session/SecureSession").SecureSession<this>>;
    findFabricFromDestinationId(destinationId: ByteArray, peerRandom: ByteArray): Fabric;
    addFabric(fabric: Fabric): FabricIndex;
    removeFabric(fabricIndex: FabricIndex): void;
    initiateExchange(fabric: Fabric, nodeId: NodeId, protocolId: number): import("./common/MessageExchange").MessageExchange<MatterDevice>;
    findResumptionRecordById(resumptionId: ByteArray): ResumptionRecord | undefined;
    saveResumptionRecord(resumptionRecord: ResumptionRecord): void;
    armFailSafe(): void;
    getFabricBuilder(): import("./fabric/Fabric").FabricBuilder;
    getFabrics(): Fabric[];
    completeCommission(): void;
    openCommissioningModeWindow(mode: number, discriminator: number): void;
    findDevice(fabric: Fabric, nodeId: NodeId): Promise<undefined | {
        session: Session<MatterDevice>;
        channel: Channel<ByteArray>;
    }>;
    stop(): void;
}
